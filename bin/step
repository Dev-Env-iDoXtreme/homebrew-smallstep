#! /bin/sh
#/
#/ usage: ./step <url>
#/
#/ positional arguments:
#/   url        internet address from which to download step tarball
#/
#/ examples:
#/   - ./step https://github.com/smallstep/cli/releases/download/v0.0.2-rc.16/brew_step_0.0.2-rc.16.tar.gz
#/

set -e

usage() {
    cat "$0" | grep '^#/' | cut -c 4-
    exit $1
}

if [ $# -ne 1 ]; then
    echo "Not enough positional arguments"
    usage 1
fi

URL="${1}"
DIR="$( cd "$(dirname "$(dirname "$0")")" ; pwd -P )"

cd "$(mktemp -d)"
TMP="$(PWD)"
trap "rm -rf \"${TMP}\"" EXIT INT QUIT TERM

curl -O -J -L -s "${URL}"
SHA="$(shasum -a 256 "$(ls . | tr -d "\r\n")" | awk '{printf $1}')"

cat > "${DIR}/step.rb" <<EOF
# DO NOT EDIT THIS FILE DIRECTLY
# UNLESS YOU KNOW WHAT YOU ARE DOING
#
# Instead use ./bin/step to update this file for new releases.

class Step < Formula
  desc "Crypto and x509 Swiss-Army-Knife"
  homepage "https://smallstep.com"
  url "${URL}"
  sha256 "${SHA}"

  depends_on "dep" => :build
  depends_on "go" => :build

  def install
    ENV["GOPATH"] = buildpath
    (buildpath/"src/github.com/smallstep").install buildpath.children
    cd "src/github.com/smallstep/cli" do
      system "make", "build"
      bin.install "bin/step" => "step"
      bash_completion.install "autocomplete/bash_autocomplete" => "step"
    end
    cd "src/github.com/smallstep/certificates" do
      system "make", "build"
      bin.install "bin/step-ca" => "step-ca"
    end
  end

  test do
    # Generate a public / private key pair. Creates foo.pub and foo.priv.
    system "#{bin}/step", "crypto", "keypair", "foo.pub", "foo.priv", "--no-password", "--insecure"
    assert_equal "foo.priv\nfoo.pub\n", shell_output("ls foo*")

    # Generate a root certificate and private key with subject baz written to baz.crt and baz.key.
    system "#{bin}/step", "certificate", "create", "--profile", "root-ca", "--no-password", "--insecure", "baz", "baz.crt", "baz.key"
    assert_equal "baz.crt\nbaz.key\n", shell_output("ls baz*")
    assert_equal "Subject: CN=baz\n", shell_output("#{bin}/step certificate inspect baz.crt | grep 'Subject: CN' | sed -e 's/^[ \t]*//'")
    assert_equal "Issuer: CN=baz\n", shell_output("#{bin}/step certificate inspect baz.crt | grep 'Issuer: CN' | sed -e 's/^[ \t]*//'")

    # Generate a leaf certificate signed by the previously created root.
    system "#{bin}/step", "certificate", "create", "--profile", "intermediate-ca", "--no-password", "--insecure", "--ca", "baz.crt", "--ca-key", "baz.key", "zap", "zap.crt", "zap.key"
    assert_equal "zap.crt\nzap.key\n", shell_output("ls zap*")
    assert_equal "Subject: CN=zap\n", shell_output("#{bin}/step certificate inspect zap.crt | grep 'Subject: CN' | sed -e 's/^[ \t]*//'")
    assert_equal "Issuer: CN=baz\n", shell_output("#{bin}/step certificate inspect zap.crt | grep 'Issuer: CN' | sed -e 's/^[ \t]*//'")

    # Make sure that step-ca is installed.
    system "#{bin}/step-ca", "version"
  end
end
EOF
